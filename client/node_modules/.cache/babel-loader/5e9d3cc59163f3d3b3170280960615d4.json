{"ast":null,"code":"import { addMessage } from '../store/messages.slice';\nimport { addUser, removeTypingUser, setOnlineUsers, setTypingUser } from '../store/users.slice';\nexport default function socketMiddleware(socket) {\n  return params => next => action => {\n    const {\n      dispatch\n    } = params;\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // 로그인시 소켓과 연결\n      case 'users/login':\n        {\n          socket.connect(); // 유저 로그 인/아웃 시 유저 리스트 업데이트\n\n          socket.on('users online', onlineUsers => {\n            dispatch(setOnlineUsers(onlineUsers));\n          }); // 메세지 추가\n\n          socket.on('receive message', message => {\n            dispatch(addMessage(message));\n          }); // 타이핑유저 제거\n\n          socket.on('user stopped typing...', username => {\n            dispatch(removeTypingUser(username));\n          }); // 타이핑유저 추가\n\n          socket.on('users starts typing...', username => {\n            dispatch(setTypingUser(username));\n          }); // 새로운 유저 추가\n\n          socket.on('new user added', user => {\n            dispatch(addUser(user));\n          }); // 온라인 유저 목록에 현재 유저 추가\n\n          socket.emit('new login', payload);\n          break;\n        }\n      // 사용자 입력을 서버에 알림\n\n      case 'users/sendThisUserIsTyping':\n        {\n          socket.emit('typing...', payload);\n          break;\n        }\n      // 타이핑 멈춤을 서버에 알림\n\n      case 'users/sendThisUserStoppedTyping':\n        {\n          socket.emit('stopped typing...', payload);\n          return;\n        }\n    }\n\n    return next(action);\n  };\n}","map":{"version":3,"sources":["C:/node/chat-site/client/src/middleware/socketMiddleware.ts"],"names":["addMessage","addUser","removeTypingUser","setOnlineUsers","setTypingUser","socketMiddleware","socket","params","next","action","dispatch","type","payload","connect","on","onlineUsers","message","username","user","emit"],"mappings":"AAEA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoCC,cAApC,EAAoDC,aAApD,QAAyE,sBAAzE;AAQA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAuC;AACpD,SAAQC,MAAD,IAAqCC,IAAD,IAAgBC,MAAD,IAAiB;AACzE,UAAM;AAAEC,MAAAA;AAAF,QAAeH,MAArB;AACA,UAAM;AAAEI,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBH,MAA1B;;AAEA,YAAQE,IAAR;AACE;AACA,WAAK,aAAL;AAAoB;AAClBL,UAAAA,MAAM,CAACO,OAAP,GADkB,CAGlB;;AACAP,UAAAA,MAAM,CAACQ,EAAP,CAAU,cAAV,EAA2BC,WAAD,IAA2B;AACnDL,YAAAA,QAAQ,CAACP,cAAc,CAACY,WAAD,CAAf,CAAR;AACD,WAFD,EAJkB,CAQlB;;AACAT,UAAAA,MAAM,CAACQ,EAAP,CAAU,iBAAV,EAA8BE,OAAD,IAAsB;AACjDN,YAAAA,QAAQ,CAACV,UAAU,CAACgB,OAAD,CAAX,CAAR;AACD,WAFD,EATkB,CAalB;;AACAV,UAAAA,MAAM,CAACQ,EAAP,CAAU,wBAAV,EAAqCG,QAAD,IAAsB;AACxDP,YAAAA,QAAQ,CAACR,gBAAgB,CAACe,QAAD,CAAjB,CAAR;AACD,WAFD,EAdkB,CAkBlB;;AACAX,UAAAA,MAAM,CAACQ,EAAP,CAAU,wBAAV,EAAqCG,QAAD,IAAsB;AACxDP,YAAAA,QAAQ,CAACN,aAAa,CAACa,QAAD,CAAd,CAAR;AACD,WAFD,EAnBkB,CAuBlB;;AACAX,UAAAA,MAAM,CAACQ,EAAP,CAAU,gBAAV,EAA6BI,IAAD,IAAgB;AAC1CR,YAAAA,QAAQ,CAACT,OAAO,CAACiB,IAAD,CAAR,CAAR;AACD,WAFD,EAxBkB,CA4BlB;;AACAZ,UAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBP,OAAzB;AAEA;AACD;AAED;;AACA,WAAK,4BAAL;AAAmC;AACjCN,UAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBP,OAAzB;AAEA;AACD;AAED;;AACA,WAAK,iCAAL;AAAwC;AACtCN,UAAAA,MAAM,CAACa,IAAP,CAAY,mBAAZ,EAAiCP,OAAjC;AAEA;AACD;AAhDH;;AAmDA,WAAOJ,IAAI,CAACC,MAAD,CAAX;AACD,GAxDD;AAyDD","sourcesContent":["import { Dispatch } from 'redux';\r\n\r\nimport { addMessage } from '../store/messages.slice';\r\nimport { addUser, removeTypingUser, setOnlineUsers, setTypingUser } from '../store/users.slice';\r\nimport { Message, User, RootState } from '../utilities/types';\r\n\r\ninterface SocketMiddlewareParams {\r\n  dispatch: Dispatch;\r\n  getState: () => RootState;\r\n}\r\n\r\nexport default function socketMiddleware(socket: any) {\r\n  return (params: SocketMiddlewareParams) => (next: any) => (action: any) => {\r\n    const { dispatch } = params;\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n      // 로그인시 소켓과 연결\r\n      case 'users/login': {\r\n        socket.connect();\r\n\r\n        // 유저 로그 인/아웃 시 유저 리스트 업데이트\r\n        socket.on('users online', (onlineUsers: string[]) => {\r\n          dispatch(setOnlineUsers(onlineUsers));\r\n        });\r\n\r\n        // 메세지 추가\r\n        socket.on('receive message', (message: Message) => {\r\n          dispatch(addMessage(message));\r\n        });\r\n\r\n        // 타이핑유저 제거\r\n        socket.on('user stopped typing...', (username: string) => {\r\n          dispatch(removeTypingUser(username));\r\n        });\r\n\r\n        // 타이핑유저 추가\r\n        socket.on('users starts typing...', (username: string) => {\r\n          dispatch(setTypingUser(username));\r\n        });\r\n\r\n        // 새로운 유저 추가\r\n        socket.on('new user added', (user: User) => {\r\n          dispatch(addUser(user));\r\n        });\r\n\r\n        // 온라인 유저 목록에 현재 유저 추가\r\n        socket.emit('new login', payload);\r\n\r\n        break;\r\n      }\r\n\r\n      // 사용자 입력을 서버에 알림\r\n      case 'users/sendThisUserIsTyping': {\r\n        socket.emit('typing...', payload);\r\n\r\n        break;\r\n      }\r\n\r\n      // 타이핑 멈춤을 서버에 알림\r\n      case 'users/sendThisUserStoppedTyping': {\r\n        socket.emit('stopped typing...', payload);\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    return next(action);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}