{"ast":null,"code":"import axios from 'axios';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  messages: [],\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, {\n      payload\n    }) => {\n      state.messages = payload;\n    },\n    addMessage: (state, {\n      payload\n    }) => {\n      state.messages.push(payload);\n    },\n    sendMessage: (state, {\n      payload\n    }) => {// placeholder message\n    },\n    setLoading: state => {\n      state.loading = true;\n    },\n    setLoadingComplete: state => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  sendMessage,\n  addMessage,\n  setMessages,\n  setLoading,\n  setLoadingComplete\n} = messagesSlice.actions;\nexport default messagesSlice.reducer; //Action\n\nexport function getMessages() {\n  return async (dispatch, getState) => {\n    dispatch(setLoading());\n\n    try {\n      const {\n        data\n      } = await axios('/api/messages');\n      dispatch(setMessages(data.messages));\n    } catch (e) {\n      console.log(e);\n    } finally {\n      dispatch(setLoadingComplete());\n    }\n  };\n}","map":{"version":3,"sources":["C:/node/chat-site/client/src/store/messages.slice.ts"],"names":["axios","createSlice","initialState","messages","loading","error","messagesSlice","name","reducers","setMessages","state","payload","addMessage","push","sendMessage","setLoading","setLoadingComplete","actions","reducer","getMessages","dispatch","getState","data","e","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAAqD,kBAArD;AAGA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,QAAQ,EAAE,EADwB;AAElCC,EAAAA,OAAO,EAAE,KAFyB;AAGlCC,EAAAA,KAAK,EAAE;AAH2B,CAApC;AAMA,MAAMC,aAAa,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,UAD0B;AAEhCL,EAAAA,YAFgC;AAGhCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAkD;AAC7DD,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,OAAjB;AACD,KAHO;AAIRC,IAAAA,UAAU,EAAE,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAgD;AAC1DD,MAAAA,KAAK,CAACP,QAAN,CAAeU,IAAf,CAAoBF,OAApB;AACD,KANO;AAORG,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAA4C,CACvD;AACD,KATO;AAURI,IAAAA,UAAU,EAAGL,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAZO;AAaRY,IAAAA,kBAAkB,EAAGN,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAfO;AAHsB,CAAD,CAAjC;AAsBA,OAAO,MAAM;AAAEU,EAAAA,WAAF;AAAeF,EAAAA,UAAf;AAA2BH,EAAAA,WAA3B;AAAwCM,EAAAA,UAAxC;AAAoDC,EAAAA;AAApD,IAA2EV,aAAa,CAACW,OAA/F;AACP,eAAeX,aAAa,CAACY,OAA7B,C,CAEA;;AACA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAO,OAAOC,QAAP,EAA2BC,QAA3B,KAAkD;AACvDD,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;;AAEA,QAAI;AACF,YAAM;AAAEO,QAAAA;AAAF,UAAW,MAAMtB,KAAK,CAAC,eAAD,CAA5B;AAEAoB,MAAAA,QAAQ,CAACX,WAAW,CAACa,IAAI,CAACnB,QAAN,CAAZ,CAAR;AACD,KAJD,CAIE,OAAOoB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KAND,SAMU;AACRH,MAAAA,QAAQ,CAACJ,kBAAkB,EAAnB,CAAR;AACD;AACF,GAZD;AAaD","sourcesContent":["import axios from 'axios';\r\nimport { createSlice, PayloadAction, Dispatch } from '@reduxjs/toolkit';\r\nimport { Message, MessagesState } from '../utilities/types';\r\n\r\nconst initialState: MessagesState = {\r\n  messages: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst messagesSlice = createSlice({\r\n  name: 'messages',\r\n  initialState,\r\n  reducers: {\r\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\r\n      state.messages = payload;\r\n    },\r\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\r\n      state.messages.push(payload);\r\n    },\r\n    sendMessage: (state, { payload }: PayloadAction<any>) => {\r\n      // placeholder message\r\n    },\r\n    setLoading: (state) => {\r\n      state.loading = true;\r\n    },\r\n    setLoadingComplete: (state) => {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { sendMessage, addMessage, setMessages, setLoading, setLoadingComplete } = messagesSlice.actions;\r\nexport default messagesSlice.reducer;\r\n\r\n//Action\r\nexport function getMessages() {\r\n  return async (dispatch: Dispatch, getState: () => {}) => {\r\n    dispatch(setLoading());\r\n\r\n    try {\r\n      const { data } = await axios('/api/messages');\r\n\r\n      dispatch(setMessages(data.messages));\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      dispatch(setLoadingComplete());\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}