{"ast":null,"code":"import axios from 'axios';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  users: [a, b],\n  onlineUsers: [],\n  loading: false,\n  error: null,\n  typingUsers: []\n};\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    setOnlineUsers: (state, {\n      payload\n    }) => {\n      state.onlineUsers = payload;\n    },\n    setUsers: (state, {\n      payload\n    }) => {\n      state.users = payload;\n    },\n    addUser: (state, {\n      payload\n    }) => {\n      state.users.push(payload);\n    },\n    setLoading: state => {\n      state.loading = true;\n    },\n    setLoadingComplete: state => {\n      state.loading = false;\n    },\n    setTypingUser: (state, {\n      payload\n    }) => {\n      state.typingUsers = [payload, ...[...state.typingUsers].filter(username => username !== payload)];\n    },\n    removeTypingUser: (state, {\n      payload\n    }) => {\n      state.typingUsers = state.typingUsers.filter(username => username !== payload);\n    },\n    sendThisUserIsTyping: (state, {\n      payload\n    }) => {},\n    sendThisUserStoppedTyping: (state, {\n      payload\n    }) => {}\n  }\n});\nexport const {\n  setUsers,\n  addUser,\n  setOnlineUsers,\n  setLoading,\n  setLoadingComplete,\n  setTypingUser,\n  removeTypingUser,\n  sendThisUserIsTyping,\n  sendThisUserStoppedTyping\n} = usersSlice.actions;\nexport default usersSlice.reducer; //Action\n\nexport function getUsers() {\n  return async (dispatch, getState) => {\n    dispatch(setLoading());\n\n    try {\n      const {\n        data\n      } = await axios('/api/messages');\n      dispatch(setUsers(data.users));\n    } catch (e) {\n      console.log(e);\n    } finally {\n      dispatch(setLoadingComplete());\n    }\n  };\n}","map":{"version":3,"sources":["C:/node/chat-site/client/src/store/users.slice.ts"],"names":["axios","createSlice","initialState","users","a","b","onlineUsers","loading","error","typingUsers","usersSlice","name","reducers","setOnlineUsers","state","payload","setUsers","addUser","push","setLoading","setLoadingComplete","setTypingUser","filter","username","removeTypingUser","sendThisUserIsTyping","sendThisUserStoppedTyping","actions","reducer","getUsers","dispatch","getState","data","e","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { createSlice, PayloadAction, Dispatch } from '@reduxjs/toolkit';\r\nimport { User, UsersState } from '../utilities/types';\r\n\r\nconst initialState: UsersState = {\r\n  users: [a, b],\r\n  onlineUsers: [],\r\n  loading: false,\r\n  error: null,\r\n  typingUsers: [],\r\n};\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    setOnlineUsers: (state, { payload }: PayloadAction<string[]>) => {\r\n      state.onlineUsers = payload;\r\n    },\r\n    setUsers: (state, { payload }: PayloadAction<User[]>) => {\r\n      state.users = payload;\r\n    },\r\n    addUser: (state, { payload }: PayloadAction<User>) => {\r\n      state.users.push(payload);\r\n    },\r\n    setLoading: (state) => {\r\n      state.loading = true;\r\n    },\r\n    setLoadingComplete: (state) => {\r\n      state.loading = false;\r\n    },\r\n    setTypingUser: (state, { payload }) => {\r\n      state.typingUsers = [payload, ...[...state.typingUsers].filter((username) => username !== payload)];\r\n    },\r\n    removeTypingUser: (state, { payload }) => {\r\n      state.typingUsers = state.typingUsers.filter((username) => username !== payload);\r\n    },\r\n    sendThisUserIsTyping: (state, { payload }: PayloadAction<any>) => {},\r\n    sendThisUserStoppedTyping: (state, { payload }: PayloadAction<any>) => {},\r\n  },\r\n});\r\n\r\nexport const {\r\n  setUsers,\r\n  addUser,\r\n  setOnlineUsers,\r\n  setLoading,\r\n  setLoadingComplete,\r\n  setTypingUser,\r\n  removeTypingUser,\r\n  sendThisUserIsTyping,\r\n  sendThisUserStoppedTyping,\r\n} = usersSlice.actions;\r\nexport default usersSlice.reducer;\r\n\r\n//Action\r\nexport function getUsers() {\r\n  return async (dispatch: Dispatch, getState: () => {}) => {\r\n    dispatch(setLoading());\r\n\r\n    try {\r\n      const { data } = await axios('/api/messages');\r\n\r\n      dispatch(setUsers(data.users));\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      dispatch(setLoadingComplete());\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}