{"ast":null,"code":"import { addMessage } from '../store/messages.slice';\nimport { addUser, removeTypingUser, setTypingUser } from '../store/users.slice';\n// 서버에서 emit된\nexport default function socketMiddleware(socket) {\n  return params => next => action => {\n    const {\n      dispatch\n    } = params;\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // Connect to the socket when a user logs in\n      case 'users/login':\n        {\n          socket.connect();\n          console.log('커넥트'); // Set up all the socket event handlers\n          // When these events are received from the socket, they'll dispatch the proper Redux action\n          // Update the online users list every time a user logs in or out\n\n          socket.on('users online', onlineUsers => {\n            console.log('유저 온라인');\n            dispatch(setOnlineUsersByUsername(onlineUsers));\n          }); // Append a message every time a new one comes in\n\n          socket.on('receive message', message => {\n            console.log('리시브 메세지');\n            dispatch(addMessage(message));\n          }); // Remove if some user stops typing\n\n          socket.on('user stopped typing...', username => {\n            console.log('타이핑 중단');\n            dispatch(removeTypingUser(username));\n          }); // Add if some user starts typing\n\n          socket.on('user starts typing...', username => {\n            console.log('타이핑 시작');\n            console.log('type: ', type);\n            dispatch(setTypingUser(username));\n          }); // Append a user every time a new one is registered\n\n          socket.on('new user added', user => {\n            dispatch(addUser(user));\n          }); // Add the current user to the online users list\n          // 가장 처음에 발생되는 emit\n\n          socket.emit('new login', payload);\n          break;\n        }\n      // Telling the sever that this user is typing...\n\n      case 'users/sendThisUserIsTyping':\n        {\n          socket.emit('typing...', payload);\n          break;\n        }\n      // Telling the server that this user stopped typing..\n\n      case 'users/sendThisUserStoppedTyping':\n        {\n          socket.emit('stopped typing...', payload);\n          return;\n        }\n      // Disconnect from the socket when a user logs out\n\n      case 'users/logout':\n        {\n          socket.disconnect();\n          break;\n        }\n      // Let the server be the source of truth for all messages; don't dispatch anything\n\n      case 'messages/sendMessage':\n        {\n          socket.emit('send message', payload);\n          return;\n        }\n    }\n\n    return next(action);\n  };\n}","map":{"version":3,"sources":["C:/node/chat-site/client/src/middleware/socketMiddleware.ts"],"names":["addMessage","addUser","removeTypingUser","setTypingUser","socketMiddleware","socket","params","next","action","dispatch","type","payload","connect","console","log","on","onlineUsers","setOnlineUsersByUsername","message","username","user","emit","disconnect"],"mappings":"AAEA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoDC,aAApD,QAAyE,sBAAzE;AAQA;AACA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAuC;AACpD,SAAQC,MAAD,IAAqCC,IAAD,IAAgBC,MAAD,IAAiB;AACzE,UAAM;AAAEC,MAAAA;AAAF,QAAeH,MAArB;AACA,UAAM;AAAEI,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBH,MAA1B;;AAEA,YAAQE,IAAR;AACE;AACA,WAAK,aAAL;AAAoB;AAClBL,UAAAA,MAAM,CAACO,OAAP;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAFkB,CAGlB;AACA;AAEA;;AACAT,UAAAA,MAAM,CAACU,EAAP,CAAU,cAAV,EAA2BC,WAAD,IAA2B;AACnDH,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAL,YAAAA,QAAQ,CAACQ,wBAAwB,CAACD,WAAD,CAAzB,CAAR;AACD,WAHD,EAPkB,CAYlB;;AACAX,UAAAA,MAAM,CAACU,EAAP,CAAU,iBAAV,EAA8BG,OAAD,IAAsB;AACjDL,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAL,YAAAA,QAAQ,CAACT,UAAU,CAACkB,OAAD,CAAX,CAAR;AACD,WAHD,EAbkB,CAkBlB;;AACAb,UAAAA,MAAM,CAACU,EAAP,CAAU,wBAAV,EAAqCI,QAAD,IAAsB;AACxDN,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAL,YAAAA,QAAQ,CAACP,gBAAgB,CAACiB,QAAD,CAAjB,CAAR;AACD,WAHD,EAnBkB,CAwBlB;;AACAd,UAAAA,MAAM,CAACU,EAAP,CAAU,uBAAV,EAAoCI,QAAD,IAAsB;AACvDN,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAtB;AACAD,YAAAA,QAAQ,CAACN,aAAa,CAACgB,QAAD,CAAd,CAAR;AACD,WAJD,EAzBkB,CA+BlB;;AACAd,UAAAA,MAAM,CAACU,EAAP,CAAU,gBAAV,EAA6BK,IAAD,IAAgB;AAC1CX,YAAAA,QAAQ,CAACR,OAAO,CAACmB,IAAD,CAAR,CAAR;AACD,WAFD,EAhCkB,CAoClB;AACA;;AACAf,UAAAA,MAAM,CAACgB,IAAP,CAAY,WAAZ,EAAyBV,OAAzB;AAEA;AACD;AAED;;AACA,WAAK,4BAAL;AAAmC;AACjCN,UAAAA,MAAM,CAACgB,IAAP,CAAY,WAAZ,EAAyBV,OAAzB;AAEA;AACD;AAED;;AACA,WAAK,iCAAL;AAAwC;AACtCN,UAAAA,MAAM,CAACgB,IAAP,CAAY,mBAAZ,EAAiCV,OAAjC;AAEA;AACD;AAED;;AACA,WAAK,cAAL;AAAqB;AACnBN,UAAAA,MAAM,CAACiB,UAAP;AAEA;AACD;AACD;;AACA,WAAK,sBAAL;AAA6B;AAC3BjB,UAAAA,MAAM,CAACgB,IAAP,CAAY,cAAZ,EAA4BV,OAA5B;AAEA;AACD;AAtEH;;AAyEA,WAAOJ,IAAI,CAACC,MAAD,CAAX;AACD,GA9ED;AA+ED","sourcesContent":["import { Dispatch } from 'redux';\n\nimport { addMessage } from '../store/messages.slice';\nimport { addUser, removeTypingUser, setOnlineUsers, setTypingUser } from '../store/users.slice';\nimport { Message, User, RootState } from '../utilities/types';\n\ninterface SocketMiddlewareParams {\n  dispatch: Dispatch;\n  getState: () => RootState;\n}\n\n// 서버에서 emit된\nexport default function socketMiddleware(socket: any) {\n  return (params: SocketMiddlewareParams) => (next: any) => (action: any) => {\n    const { dispatch } = params;\n    const { type, payload } = action;\n\n    switch (type) {\n      // Connect to the socket when a user logs in\n      case 'users/login': {\n        socket.connect();\n        console.log('커넥트');\n        // Set up all the socket event handlers\n        // When these events are received from the socket, they'll dispatch the proper Redux action\n\n        // Update the online users list every time a user logs in or out\n        socket.on('users online', (onlineUsers: string[]) => {\n          console.log('유저 온라인');\n          dispatch(setOnlineUsersByUsername(onlineUsers));\n        });\n\n        // Append a message every time a new one comes in\n        socket.on('receive message', (message: Message) => {\n          console.log('리시브 메세지');\n          dispatch(addMessage(message));\n        });\n\n        // Remove if some user stops typing\n        socket.on('user stopped typing...', (username: string) => {\n          console.log('타이핑 중단');\n          dispatch(removeTypingUser(username));\n        });\n\n        // Add if some user starts typing\n        socket.on('user starts typing...', (username: string) => {\n          console.log('타이핑 시작');\n          console.log('type: ', type);\n          dispatch(setTypingUser(username));\n        });\n\n        // Append a user every time a new one is registered\n        socket.on('new user added', (user: User) => {\n          dispatch(addUser(user));\n        });\n\n        // Add the current user to the online users list\n        // 가장 처음에 발생되는 emit\n        socket.emit('new login', payload);\n\n        break;\n      }\n\n      // Telling the sever that this user is typing...\n      case 'users/sendThisUserIsTyping': {\n        socket.emit('typing...', payload);\n\n        break;\n      }\n\n      // Telling the server that this user stopped typing..\n      case 'users/sendThisUserStoppedTyping': {\n        socket.emit('stopped typing...', payload);\n\n        return;\n      }\n\n      // Disconnect from the socket when a user logs out\n      case 'users/logout': {\n        socket.disconnect();\n\n        break;\n      }\n      // Let the server be the source of truth for all messages; don't dispatch anything\n      case 'messages/sendMessage': {\n        socket.emit('send message', payload);\n\n        return;\n      }\n    }\n\n    return next(action);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}